\BOOKMARK [0][-]{section*.1}{Contents}{}
\BOOKMARK [0][-]{chapter*.5}{Preface}{}
\BOOKMARK [0][-]{chapter.1}{Motivation and Background}{}
\BOOKMARK [1][-]{section.1.1}{Where are we}{chapter.1}
\BOOKMARK [2][-]{subsection.1.1.1}{The concurrency squeeze: from the hardware up, from the web down}{section.1.1}
\BOOKMARK [2][-]{subsection.1.1.2}{Ubiquity of robust, high-performance virtual machines}{section.1.1}
\BOOKMARK [2][-]{subsection.1.1.3}{Advances in functional programming, monads and the awkward squad}{section.1.1}
\BOOKMARK [1][-]{section.1.2}{Where are we going}{chapter.1}
\BOOKMARK [2][-]{subsection.1.2.1}{A functional web}{section.1.2}
\BOOKMARK [2][-]{subsection.1.2.2}{DSL-based design}{section.1.2}
\BOOKMARK [1][-]{section.1.3}{How are we going to get there}{chapter.1}
\BOOKMARK [2][-]{subsection.1.3.1}{Leading by example}{section.1.3}
\BOOKMARK [0][-]{chapter.2}{Toolbox}{}
\BOOKMARK [1][-]{section.2.1}{Introduction to notation and terminology}{chapter.2}
\BOOKMARK [1][-]{section.2.2}{Introduction to core design patterns}{chapter.2}
\BOOKMARK [2][-]{subsection.2.2.1}{A little history}{section.2.2}
\BOOKMARK [1][-]{section.2.3}{Variations in presentation}{chapter.2}
\BOOKMARK [2][-]{subsection.2.3.1}{A little more history}{section.2.3}
\BOOKMARK [0][-]{chapter.3}{An IO-monad for http streams}{}
\BOOKMARK [1][-]{section.3.1}{Code first, questions later}{chapter.3}
\BOOKMARK [2][-]{subsection.3.1.1}{An HTTP-request processor}{section.3.1}
\BOOKMARK [2][-]{subsection.3.1.2}{What we did}{section.3.1}
\BOOKMARK [1][-]{section.3.2}{Synchrony, asynchrony and buffering}{chapter.3}
\BOOKMARK [1][-]{section.3.3}{State, statelessness and continuations}{chapter.3}
\BOOKMARK [0][-]{chapter.4}{Parsing requests, monadically}{}
\BOOKMARK [1][-]{section.4.1}{Obligatory parsing monad}{chapter.4}
\BOOKMARK [1][-]{section.4.2}{Your parser combinators are showing}{chapter.4}
\BOOKMARK [1][-]{section.4.3}{EBNF and why higher levels of abstraction are better}{chapter.4}
\BOOKMARK [0][-]{chapter.5}{The domain model as abstract syntax}{}
\BOOKMARK [1][-]{section.5.1}{Our abstract syntax}{chapter.5}
\BOOKMARK [1][-]{section.5.2}{Our application domain model}{chapter.5}
\BOOKMARK [1][-]{section.5.3}{A transform pipeline}{chapter.5}
\BOOKMARK [0][-]{chapter.6}{Zippers and contexts and URI's, oh my!}{}
\BOOKMARK [1][-]{section.6.1}{Zippers are not just for Bruno anymore}{chapter.6}
\BOOKMARK [1][-]{section.6.2}{Constructing contexts and zippers from data types}{chapter.6}
\BOOKMARK [1][-]{section.6.3}{Mapping URIs to zipper-based paths and back}{chapter.6}
\BOOKMARK [0][-]{chapter.7}{A review of collections as monads}{}
\BOOKMARK [1][-]{section.7.1}{Monad as container}{chapter.7}
\BOOKMARK [1][-]{section.7.2}{Monads and take-out}{chapter.7}
\BOOKMARK [0][-]{chapter.8}{Domain model, storage and state}{}
\BOOKMARK [1][-]{section.8.1}{Mapping our domain model to storage}{chapter.8}
\BOOKMARK [1][-]{section.8.2}{Storage and language-integrated query}{chapter.8}
\BOOKMARK [1][-]{section.8.3}{Continuations revisited}{chapter.8}
\BOOKMARK [0][-]{chapter.9}{Putting it all together}{}
\BOOKMARK [1][-]{section.9.1}{Our web application end-to-end}{chapter.9}
\BOOKMARK [1][-]{section.9.2}{Deploying our application}{chapter.9}
\BOOKMARK [2][-]{subsection.9.2.1}{Why we are not deploying on GAE}{section.9.2}
\BOOKMARK [1][-]{section.9.3}{From one web application to web framework}{chapter.9}
\BOOKMARK [0][-]{chapter.10}{The semantic web}{}
\BOOKMARK [1][-]{section.10.1}{How our web framework enables different kinds of application queries}{chapter.10}
\BOOKMARK [1][-]{section.10.2}{Searching for programs}{chapter.10}
\BOOKMARK [2][-]{subsection.10.2.1}{A new foundation for search}{section.10.2}
\BOOKMARK [2][-]{subsection.10.2.2}{Examples}{section.10.2}
